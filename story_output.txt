Welcome, User!

This is an instruction for StoryTailor, the programming language for making stories. It brings the power of programming into the Storytelling.

First of all, press Ctrl+` or find a menu at the top of the Window "Terminal->New Terminal". The terminal will open. Type there: 

npm install

And press Enter. This operation downloads and installs all the node.js modules needed for StoryTailor to work. 
After it's done, press Ctrl+Shit+P (on Windows) or Command+Shift+P on Mac. The Command Palette will open. Type there

StoryTailor: Compile and show Preview

Select the command "StoryTailor: Compile and show Preview" and press Enter (or just left-click with mouse on this command).
This command compiles a project and shows you a preview of the story in a "Preview story" window that appears at the left. When you work on some StoryTailor file and whant to see how it looks compiled, use this command. 

As you can see the simple text compiles to the same simple text, just like if it was written in a regular txt file. 

Let's add some magic to it. 

Comments can be even inside of the text.

There are special symbols we can add into the text: the tab symbol (	) the 'endline' () symbol, the new line symbol (
). Compile story to see how those symbols look in an assembled text.

Here we have a context variable:


Variable is a separate part of memory that holds some data for you. We can include this variable into the text between symbols * and ; 
Like here: Text Variable Value. Now press Ctrl+Shit+P (Command+Shift+P on Mac) and select the "StoryTailor: Compile and show Preview" option. It will compile the text and show it in the "Preview story" window. You can see that Variable's value is inserted into the text. We can insert it as many times as we want: Text Variable Value and again: Text Variable Value, and so on. 

What if we want to add the * and ; symbols into the text without making a variable include? 
To do so we just add the backslash before the special symbol, like here: *; and it's now just a simple text.
It's called escaping. We can escape any special symbol, even the backslash itself: \.

Variable can hold text line, like in example above, but also it can be a number or boolean: 



So we can add them in the text: Number: 100 and boolean: true. 

We use "" to surround the string value like in our Text Variable. This string can also have an included variables:


Now let's include the variable into the text, so we can see how it works: Text: Text Variable Value Number: 100 and Boolean: true. 

Please, keep in mind that variable names are case-sensitive, which means "Variable" and "variable" are different variables. 

Context variable name can contain words and spaces between words. For example: 'Variable', 'Variable Name', 'Variable2 Name'.
If we have any special symbol in the variable name, we have to escape it: 'Variable\" Name', 
If in a variable name we have a digit surrounded by spaces, like 'Variable 3 Name', we have to escape this digit: 'Variable \3 Name'.
If we want to have spaces in the beginning and/or end variable, we also have to escape them: ' Variable with spaces ', so this way StoryTailor knows that those spaces are also a part of the variable name. 

There are special keywords used in the StoryTailor: if, else, import, as, from, for, in, while, do, break, continue, return, true, false, try, catch, finally, switch, case, default, debugger (they are highligted when we use them in a variable name). Keywords are used for making a programming instructions, that's why they are special cases. If we have some in the name of a variable, we need to escape them (or their parts) too:


or alternatively you can wrap the name of your variable with "'" symbols:


Now let's talk about the multiline text variables. To create one we need to declare a variable and put it's text at the next line with one tab at the beginning of every line. Here we have one:


Array Variable: First
Second
3
Variable text value starts with a 'tab' offset under the variable declaration.
This way StoryTailor knows that this text is a variable's value.

And here we will insert this variable into the text: 
"Variable text value starts with a 'tab' offset under the variable declaration.
This way StoryTailor knows that this text is a variable's value."
As you can see, it's multiline even in the compiled story.

In order to organise our variables we can nest them:

To access nested variable we use it's full name starting from root variable and separating them by dot (.).
Here it is: 10. Or "And here is the text of the nested variable" or Nested Boolean: false.
if variable's value is set in one line, like * VariableName = value; that means this variable can't have nested variables.

We don't have to hold everything in one file. Let's import another file (utils.sts) here:


Now we have utils variable that holds everything that is in that "utils.sts" file. 
For example, there is a variable "Story Name". Let's include it: Example StoryTailor project. This way we can split our story into several files and combine them together in some other one. 

There is also another way to import the extenral file (import in):


This way we don't need to write the module name before every it's member:
The story name is Example StoryTailor project. 'import in' command simply copies every variable from that module into our module, as if they were declared here.

And there is one more thing about variables. When we declare a variable by * VariableName syntax we actually create a field inside a "__context" object that lives in the root of the module. This why we can have variables with spaces in their name. The StoryTailor compiles to JavaScript, like TypeScript. So we can import any JavaScript module into StoryTailor module and vice versa. So, every context variable is a field of the __context object. But if we want to access a member outside the __context object, we need to add a '@' special symbol before the member name. 
Like in this example, where we insert the current Date and Time in the story text: 11/29/2023, 1:45:06 AM.

Also we can create a function and put it into the variable:


Now it's time to go deeper. Here is the code block:

This line of text was added in the code block. We have a Text Variable which contains 'Text Variable Value' string.
And here is a function 'Print Text Line' called with different parameters:
This line of text was added by function called with 'hello' parameter.
This line of text was added by function called with '200' parameter.
This line of text was added by function called with 'true' parameter.

Now let's see how loops work
for loop result: 0 + 1 + 2 = 3

while loop result: 0 + 1 + 2 + 3 + 4 = 10

do while loop result: 0 + 1 + 2 + 3 + 4 = 10

Now let's go over __context object and look what members it has
'__text': object;
'Story Name': string;
'Text Variable': string;
'Number Variable': number;
'Boolean Variable': boolean;
'Composite Text Variable': string;
'Variable with keywords for while return': string;
'Another variable with return brake true false keywords': number;
'Multiline Text Variable': object;
'Array Variable': object;
'Root Variable': object;
'utils': object;
'Print Text Line': function;


Now we will throw an exception
exception called: demo exception
finally block called regardless to was there exception or not

End of instruction so far
---