Welcome, User!

This is an instruction for StoryTailor, the programming language for making stories. It brings the power of programming into the Storytelling.

Here you'll find an instruction for StoryTailor. 

First of all, press Ctrl+` or find a menu at the top of the Window "Terminal->New Terminal". The terminal will open. Type there: 

npm install

And press Enter. This operation downloads and installs all the node.js modules needed for StoryTailor to work. 
After it's done, press Ctrl+Shit+P (on Windows) or Command+Shift+P on Mac. The Command Palette will open. Type there

StoryTailor: Compile and show Preview

Select the command "StoryTailor: Compile and show Preview" and press Enter (or just left-click with mouse on this command).
This command compiles a project and shows you a preview of the story in a "Preview story" window that appears at the left. When you work on some StoryTailor file and whant to see how it looks compiled, use this command. 

As you can see the simple text compiles to the same simple text, just like if it was written in a regular txt file. 

Let's add some magic to it. 

// this is a comment line. It does not go to the compiled story. It's needed for developers to make notes inside the source code
// to make a comment just type // at the beginning of the text that you want to make a comment
/*
	If you don't want to comment every line, 
	but you have a multiline comment, 
	just wrap the commented lines as in this code block
*/
Comments can be even /*commented line*/inside of the text.

There are special symbols we can add into the text: the tab symbol (\t) the 'endline' (\r) symbol, the new line symbol (\n). Compile story to see how those symbols look in an assembled text.

Here we have a context variable:

* Text Variable = "Text Variable Value"

Variable is a separate part of memory that holds some data for you. We can include this variable into the text between symbols * and ; 
Like here: *Text Variable;. Now press Ctrl+Shit+P (Command+Shift+P on Mac) and select the "StoryTailor: Compile and show Preview" option. It will compile the text and show it in the "Preview story" window. You can see that Variable's value is inserted into the text. We can insert it as many times as we want: *Text Variable; and again: *Text Variable;, and so on. 

What if we want to add the * and ; symbols into the text without making a variable include? 
To do so we just add the backslash before the special symbol, like here: \*; and it's now just a simple text.
It's called escaping. We can escape any special symbol, even the backslash itself: \\.

Variable can hold text line, like in example above, but also it can be a number or boolean: 

* Number Variable = 100

* Boolean Variable = true

So we can add them in the text: Number: *Number Variable; and boolean: *Boolean Variable;. 

We use "" to surround the string value like in our Text Variable. This string can also have an included variables:

* Composite Text Variable = "Text: *Text Variable; Number: *Number Variable; and Boolean: *Boolean Variable;"

Now let's include the variable into the text, so we can see how it works: *Composite Text Variable;. 

Please, keep in mind that variable names are case-sensitive, which means "Variable" and "variable" are different variables. 

Context variable name can contain words and spaces between words. For example: 'Variable', 'Variable Name', 'Variable2 Name'.
If we have any special symbol in the variable name, we have to escape it: 'Variable\\" Name', 
If in a variable name we have a digit surrounded by spaces, like 'Variable 3 Name', we have to escape this digit: 'Variable \\3 Name'.
If we want to have spaces in the beginning and/or end variable, we also have to escape them: '\ Variable with spaces\ ', so this way StoryTailor knows that those spaces are also a part of the variable name. 

There are special keywords used in the StoryTailor: if, else, import, as, from, for, in, while, do, break, continue, return, true, false, try, catch, finally, switch, case (they are highligted when we use them in a variable name). Keywords are used for making a programming instructions, that's why they are special cases. If we have some in the name of a variable, we need to escape them (or their parts) too:

* Variable with keywords \for \while r\eturn = "This variable has a for keyword"

Now let's talk about the multiline text variables. To create one we need to declare a variable and put it's text at the next line with one tab at the beginning of every line. Here we have one:
* Multiline Text Variable
	Variable text value starts with a 'tab' offset under the variable declaration.
	This way StoryTailor knows that this text is a variable's value.

And here we will insert this variable into the text: 
"*Multiline Text Variable;"
As you can see, it's multiline even in the compiled story.

In order to organise our variables we can nest them:
* Root Variable
	* Nested Variable = 10
	* Nested Root Variable
		* Double Nested Variable
			And here is the text of the nested variable
	* Nested Boolean = false

To access nested variable we use it's full name starting from root variable and separating them by dot (.).
Here it is: *Root Variable.Nested Variable;. Or "*Root Variable.Nested Root Variable.Double Nested Variable;" or Nested Boolean: *Root Variable.Nested Boolean;.
if variable's value is set in one line, like * VariableName = value; that means this variable can't have nested variables.

We don't have to hold everything in one file. Let's import another file (utils.sts) here:

* import * as utils from "./utils"

Now we have utils variable that holds everything that is in that "utils.sts" file. 
For example, there is a variable "Story Name". Let's include it: *utils.Story Name;. This way we can split our story into several files and combine them together in some other one. 

There is also another way to import the extenral file (import in):

* import in * as utils from "./utils"

This way we don't need to write the module name before every it's member:
The story name is *Story Name;. 'import in' command simply copies every variable from that module into our module, as if they were declared here.

And there is one more thing about variables. When we declare a variable by * VariableName syntax we actually create a field inside a "__context" object that lives in the root of the module. This why we can have variables with spaces in their name. The StoryTailor compiles to JavaScript, like TypeScript. So we can import any JavaScript module into StoryTailor module and vice versa. So, every context variable is a field of the __context object. But if we want to access a member outside the __context object, we need to add a '@' special symbol before the member name. 
Like in this example, where we insert the current Date and Time in the story text: *new @Date().toLocaleString();;

Also we can create a function and put it into the variable:

* Print Text Line = function(value) {
	// to access parameter inside the function body we use @ symbol before the variable name
	// because parameters are not fields of the __context object
	// __text object is an array of all the text lines we have in our file so far
	// and __text is a member of __context object, so we write it's name without a '@' symbol
	__text.push("This line of text was added by function called with '*@value;' parameter.");
}

Now it's time to go deeper. Here is the code block:

* {
	// this is a code block. It allows to add operations

	// here is an example of how to use a console
	// don't forget that console is a native javascript object, and it's not a part of __context object, 
	// so we have to add a @ symbol before it
	@console.log("This message has been sent to console from the code block");

	// let's add one more line to it:
	__text.push("This line of text was added in the code block. We have a Text Variable which contains '*Text Variable;' string.");

	// now let's call the function we created above:
	__text.push("And here is a function 'Print Text Line' called with different parameters:")

	// Print Text Line function contains in a Context variable, so there is no need to add a @ symbol before it's name
	Print Text Line("hello"); 
	Print Text Line(200);
	Print Text Line(true);

	// now let's see how to make loops:
	// please, look how we access i variable. It's not a member of __context object,
	// so we put @ before it's name.
	let accumulatedString = "";
	let accumulatedNumber = 0;
	let maxValue = 3;
	for (let i = 0; @i < @maxValue; @i++) {
		@accumulatedNumber += @i;
		let prefix = @i == 0 ? "" : " + ";
		let postfix = @i == @maxValue - 1 ? " = *@accumulatedNumber;" : "";
		@accumulatedString += "*@prefix;*@i;*@postfix;";
	}
	__text.push(@accumulatedString)


}
